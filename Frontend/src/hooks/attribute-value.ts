/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, AttributeValue } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateAttributeValue(options?: Omit<(UseMutationOptions<(AttributeValue | undefined), DefaultError, Prisma.AttributeValueCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AttributeValueCreateArgs, DefaultError, AttributeValue, true>('AttributeValue', 'POST', `${endpoint}/attributeValue/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AttributeValueCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.AttributeValueCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AttributeValue, Prisma.AttributeValueGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AttributeValueCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AttributeValue, Prisma.AttributeValueGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyAttributeValue(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.AttributeValueCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AttributeValueCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('AttributeValue', 'POST', `${endpoint}/attributeValue/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AttributeValueCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.AttributeValueCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.AttributeValueCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyAttributeValue<TArgs extends Prisma.AttributeValueFindManyArgs, TQueryFnData = Array<Prisma.AttributeValueGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AttributeValueFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AttributeValue', `${endpoint}/attributeValue/findMany`, args, options, fetch);
}

export function useInfiniteFindManyAttributeValue<TArgs extends Prisma.AttributeValueFindManyArgs, TQueryFnData = Array<Prisma.AttributeValueGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AttributeValueFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('AttributeValue', `${endpoint}/attributeValue/findMany`, args, options, fetch);
}

export function useSuspenseFindManyAttributeValue<TArgs extends Prisma.AttributeValueFindManyArgs, TQueryFnData = Array<Prisma.AttributeValueGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AttributeValueFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AttributeValue', `${endpoint}/attributeValue/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyAttributeValue<TArgs extends Prisma.AttributeValueFindManyArgs, TQueryFnData = Array<Prisma.AttributeValueGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AttributeValueFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('AttributeValue', `${endpoint}/attributeValue/findMany`, args, options, fetch);
}

export function useFindUniqueAttributeValue<TArgs extends Prisma.AttributeValueFindUniqueArgs, TQueryFnData = Prisma.AttributeValueGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AttributeValueFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AttributeValue', `${endpoint}/attributeValue/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueAttributeValue<TArgs extends Prisma.AttributeValueFindUniqueArgs, TQueryFnData = Prisma.AttributeValueGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AttributeValueFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AttributeValue', `${endpoint}/attributeValue/findUnique`, args, options, fetch);
}

export function useFindFirstAttributeValue<TArgs extends Prisma.AttributeValueFindFirstArgs, TQueryFnData = Prisma.AttributeValueGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AttributeValueFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AttributeValue', `${endpoint}/attributeValue/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstAttributeValue<TArgs extends Prisma.AttributeValueFindFirstArgs, TQueryFnData = Prisma.AttributeValueGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AttributeValueFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AttributeValue', `${endpoint}/attributeValue/findFirst`, args, options, fetch);
}

export function useUpdateAttributeValue(options?: Omit<(UseMutationOptions<(AttributeValue | undefined), DefaultError, Prisma.AttributeValueUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AttributeValueUpdateArgs, DefaultError, AttributeValue, true>('AttributeValue', 'PUT', `${endpoint}/attributeValue/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AttributeValueUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.AttributeValueUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AttributeValue, Prisma.AttributeValueGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AttributeValueUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AttributeValue, Prisma.AttributeValueGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyAttributeValue(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.AttributeValueUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AttributeValueUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('AttributeValue', 'PUT', `${endpoint}/attributeValue/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AttributeValueUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.AttributeValueUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.AttributeValueUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertAttributeValue(options?: Omit<(UseMutationOptions<(AttributeValue | undefined), DefaultError, Prisma.AttributeValueUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AttributeValueUpsertArgs, DefaultError, AttributeValue, true>('AttributeValue', 'POST', `${endpoint}/attributeValue/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AttributeValueUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.AttributeValueUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AttributeValue, Prisma.AttributeValueGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AttributeValueUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AttributeValue, Prisma.AttributeValueGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteAttributeValue(options?: Omit<(UseMutationOptions<(AttributeValue | undefined), DefaultError, Prisma.AttributeValueDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AttributeValueDeleteArgs, DefaultError, AttributeValue, true>('AttributeValue', 'DELETE', `${endpoint}/attributeValue/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AttributeValueDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.AttributeValueDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AttributeValue, Prisma.AttributeValueGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AttributeValueDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AttributeValue, Prisma.AttributeValueGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyAttributeValue(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.AttributeValueDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AttributeValueDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('AttributeValue', 'DELETE', `${endpoint}/attributeValue/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AttributeValueDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.AttributeValueDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.AttributeValueDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateAttributeValue<TArgs extends Prisma.AttributeValueAggregateArgs, TQueryFnData = Prisma.GetAttributeValueAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AttributeValueAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AttributeValue', `${endpoint}/attributeValue/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateAttributeValue<TArgs extends Prisma.AttributeValueAggregateArgs, TQueryFnData = Prisma.GetAttributeValueAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AttributeValueAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AttributeValue', `${endpoint}/attributeValue/aggregate`, args, options, fetch);
}

export function useGroupByAttributeValue<TArgs extends Prisma.AttributeValueGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.AttributeValueGroupByArgs['orderBy'] } : { orderBy?: Prisma.AttributeValueGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.AttributeValueGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.AttributeValueGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.AttributeValueGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.AttributeValueGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.AttributeValueGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AttributeValue', `${endpoint}/attributeValue/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByAttributeValue<TArgs extends Prisma.AttributeValueGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.AttributeValueGroupByArgs['orderBy'] } : { orderBy?: Prisma.AttributeValueGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.AttributeValueGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.AttributeValueGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.AttributeValueGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.AttributeValueGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.AttributeValueGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AttributeValue', `${endpoint}/attributeValue/groupBy`, args, options, fetch);
}

export function useCountAttributeValue<TArgs extends Prisma.AttributeValueCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.AttributeValueCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AttributeValueCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AttributeValue', `${endpoint}/attributeValue/count`, args, options, fetch);
}

export function useSuspenseCountAttributeValue<TArgs extends Prisma.AttributeValueCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.AttributeValueCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AttributeValueCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AttributeValue', `${endpoint}/attributeValue/count`, args, options, fetch);
}

export function useCheckAttributeValue<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: number; attributeId?: number; value?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('AttributeValue', `${endpoint}/attributeValue/check`, args, options, fetch);
}
