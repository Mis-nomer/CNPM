/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, OrderStatusHistory } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateOrderStatusHistory(options?: Omit<(UseMutationOptions<(OrderStatusHistory | undefined), DefaultError, Prisma.OrderStatusHistoryCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OrderStatusHistoryCreateArgs, DefaultError, OrderStatusHistory, true>('OrderStatusHistory', 'POST', `${endpoint}/orderStatusHistory/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OrderStatusHistoryCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.OrderStatusHistoryCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, OrderStatusHistory, Prisma.OrderStatusHistoryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.OrderStatusHistoryCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, OrderStatusHistory, Prisma.OrderStatusHistoryGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyOrderStatusHistory(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.OrderStatusHistoryCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OrderStatusHistoryCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('OrderStatusHistory', 'POST', `${endpoint}/orderStatusHistory/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OrderStatusHistoryCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.OrderStatusHistoryCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.OrderStatusHistoryCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyOrderStatusHistory<TArgs extends Prisma.OrderStatusHistoryFindManyArgs, TQueryFnData = Array<Prisma.OrderStatusHistoryGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OrderStatusHistoryFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('OrderStatusHistory', `${endpoint}/orderStatusHistory/findMany`, args, options, fetch);
}

export function useInfiniteFindManyOrderStatusHistory<TArgs extends Prisma.OrderStatusHistoryFindManyArgs, TQueryFnData = Array<Prisma.OrderStatusHistoryGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OrderStatusHistoryFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('OrderStatusHistory', `${endpoint}/orderStatusHistory/findMany`, args, options, fetch);
}

export function useSuspenseFindManyOrderStatusHistory<TArgs extends Prisma.OrderStatusHistoryFindManyArgs, TQueryFnData = Array<Prisma.OrderStatusHistoryGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OrderStatusHistoryFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('OrderStatusHistory', `${endpoint}/orderStatusHistory/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyOrderStatusHistory<TArgs extends Prisma.OrderStatusHistoryFindManyArgs, TQueryFnData = Array<Prisma.OrderStatusHistoryGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OrderStatusHistoryFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('OrderStatusHistory', `${endpoint}/orderStatusHistory/findMany`, args, options, fetch);
}

export function useFindUniqueOrderStatusHistory<TArgs extends Prisma.OrderStatusHistoryFindUniqueArgs, TQueryFnData = Prisma.OrderStatusHistoryGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.OrderStatusHistoryFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('OrderStatusHistory', `${endpoint}/orderStatusHistory/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueOrderStatusHistory<TArgs extends Prisma.OrderStatusHistoryFindUniqueArgs, TQueryFnData = Prisma.OrderStatusHistoryGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.OrderStatusHistoryFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('OrderStatusHistory', `${endpoint}/orderStatusHistory/findUnique`, args, options, fetch);
}

export function useFindFirstOrderStatusHistory<TArgs extends Prisma.OrderStatusHistoryFindFirstArgs, TQueryFnData = Prisma.OrderStatusHistoryGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OrderStatusHistoryFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('OrderStatusHistory', `${endpoint}/orderStatusHistory/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstOrderStatusHistory<TArgs extends Prisma.OrderStatusHistoryFindFirstArgs, TQueryFnData = Prisma.OrderStatusHistoryGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OrderStatusHistoryFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('OrderStatusHistory', `${endpoint}/orderStatusHistory/findFirst`, args, options, fetch);
}

export function useUpdateOrderStatusHistory(options?: Omit<(UseMutationOptions<(OrderStatusHistory | undefined), DefaultError, Prisma.OrderStatusHistoryUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OrderStatusHistoryUpdateArgs, DefaultError, OrderStatusHistory, true>('OrderStatusHistory', 'PUT', `${endpoint}/orderStatusHistory/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OrderStatusHistoryUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.OrderStatusHistoryUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, OrderStatusHistory, Prisma.OrderStatusHistoryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.OrderStatusHistoryUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, OrderStatusHistory, Prisma.OrderStatusHistoryGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyOrderStatusHistory(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.OrderStatusHistoryUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OrderStatusHistoryUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('OrderStatusHistory', 'PUT', `${endpoint}/orderStatusHistory/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OrderStatusHistoryUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.OrderStatusHistoryUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.OrderStatusHistoryUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertOrderStatusHistory(options?: Omit<(UseMutationOptions<(OrderStatusHistory | undefined), DefaultError, Prisma.OrderStatusHistoryUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OrderStatusHistoryUpsertArgs, DefaultError, OrderStatusHistory, true>('OrderStatusHistory', 'POST', `${endpoint}/orderStatusHistory/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OrderStatusHistoryUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.OrderStatusHistoryUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, OrderStatusHistory, Prisma.OrderStatusHistoryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.OrderStatusHistoryUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, OrderStatusHistory, Prisma.OrderStatusHistoryGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteOrderStatusHistory(options?: Omit<(UseMutationOptions<(OrderStatusHistory | undefined), DefaultError, Prisma.OrderStatusHistoryDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OrderStatusHistoryDeleteArgs, DefaultError, OrderStatusHistory, true>('OrderStatusHistory', 'DELETE', `${endpoint}/orderStatusHistory/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OrderStatusHistoryDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.OrderStatusHistoryDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, OrderStatusHistory, Prisma.OrderStatusHistoryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.OrderStatusHistoryDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, OrderStatusHistory, Prisma.OrderStatusHistoryGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyOrderStatusHistory(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.OrderStatusHistoryDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OrderStatusHistoryDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('OrderStatusHistory', 'DELETE', `${endpoint}/orderStatusHistory/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OrderStatusHistoryDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.OrderStatusHistoryDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.OrderStatusHistoryDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateOrderStatusHistory<TArgs extends Prisma.OrderStatusHistoryAggregateArgs, TQueryFnData = Prisma.GetOrderStatusHistoryAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.OrderStatusHistoryAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('OrderStatusHistory', `${endpoint}/orderStatusHistory/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateOrderStatusHistory<TArgs extends Prisma.OrderStatusHistoryAggregateArgs, TQueryFnData = Prisma.GetOrderStatusHistoryAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.OrderStatusHistoryAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('OrderStatusHistory', `${endpoint}/orderStatusHistory/aggregate`, args, options, fetch);
}

export function useGroupByOrderStatusHistory<TArgs extends Prisma.OrderStatusHistoryGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.OrderStatusHistoryGroupByArgs['orderBy'] } : { orderBy?: Prisma.OrderStatusHistoryGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.OrderStatusHistoryGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.OrderStatusHistoryGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.OrderStatusHistoryGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.OrderStatusHistoryGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.OrderStatusHistoryGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('OrderStatusHistory', `${endpoint}/orderStatusHistory/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByOrderStatusHistory<TArgs extends Prisma.OrderStatusHistoryGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.OrderStatusHistoryGroupByArgs['orderBy'] } : { orderBy?: Prisma.OrderStatusHistoryGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.OrderStatusHistoryGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.OrderStatusHistoryGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.OrderStatusHistoryGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.OrderStatusHistoryGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.OrderStatusHistoryGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('OrderStatusHistory', `${endpoint}/orderStatusHistory/groupBy`, args, options, fetch);
}

export function useCountOrderStatusHistory<TArgs extends Prisma.OrderStatusHistoryCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.OrderStatusHistoryCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OrderStatusHistoryCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('OrderStatusHistory', `${endpoint}/orderStatusHistory/count`, args, options, fetch);
}

export function useSuspenseCountOrderStatusHistory<TArgs extends Prisma.OrderStatusHistoryCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.OrderStatusHistoryCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OrderStatusHistoryCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('OrderStatusHistory', `${endpoint}/orderStatusHistory/count`, args, options, fetch);
}
import type { OrderStatus } from '@prisma/client';

export function useCheckOrderStatusHistory<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: number; orderId?: number; status?: OrderStatus; notes?: string; createdById?: number }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('OrderStatusHistory', `${endpoint}/orderStatusHistory/check`, args, options, fetch);
}
