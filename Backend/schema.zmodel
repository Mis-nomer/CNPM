generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

plugin hooks {
  provider = '@zenstackhq/tanstack-query'
  output = "./hooks"
  target = "react"
}


model User {
  id        BigInt    @id @default(autoincrement())
  username  String    @unique
  email     String    @unique
  password  String
  name      String
  phone     String?
  address   String?
  birthday  DateTime? @db.Date
  isEnabled Int       @default(1) // 1 for enabled, 0 for disabled
  roleId    Int       @map("role_id") // 1 for admin, 2 for user
  createdAt DateTime  @default(now()) @map("create_at")
  updatedAt DateTime? @updatedAt @map("update_at")
  
  // Relations
  orders    Order[]
  carts     Cart[]

  // Access policies
  @@allow('read', true)
  @@allow('create', true)
  @@allow('update', auth() == this || auth().roleId == 1)
  @@allow('delete', auth().roleId == 1)
}

model Product {
  id               BigInt        @id @default(autoincrement())
  name             String
  description      String?
  price            Decimal       @db.Decimal(19, 2)
  salePrice        Decimal?      @db.Decimal(19, 2) @map("sale_price")
  quantity         BigInt
  brand            String?
  type             String    // Reference to product type
  image            String?
  thumbnail        String?
  status           Int           @default(1) // 1 for active, 0 for inactive
  productView      BigInt        @default(0) @map("product_view")
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime?     @updatedAt @map("updated_at")
  
  // Technical specifications
  screenSize       String?       @map("screen_size")
  screenResolution String?       @map("screen_reslution")
  operatingSystem  String?       @map("operating_system")
  cpu              String?
  ram              String?
  storage          String?
  battery          String?
  weight           String?
  
  // Relations
  category         Category      @relation(fields: [type], references: [code])
  orderDetails     OrderDetail[]
  carts            Cart[]

  // Access policies
  @@allow('read', true)
  @@allow('create', auth().roleId == 1)
  @@allow('update', auth().roleId == 1)
  @@allow('delete', auth().roleId == 1)
}

model Category {
  id        Int       @id @default(autoincrement())
  code      String    @unique // Product type code (e.g., 'dienthoai')
  name      String    // Display name (e.g., 'Điện thoại')
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  
  // Relations
  products  Product[]

  // Access policies
  @@allow('read', true)
  @@allow('create', auth().roleId == 1)
  @@allow('update', auth().roleId == 1)
  @@allow('delete', auth().roleId == 1)
}

model Cart {
  id        BigInt  @id @default(autoincrement())
  userId    BigInt  @map("user_id")
  productId BigInt  @map("product_id")
  quantity  BigInt
  
  // Relations
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  // Access policies
  @@allow('read', auth().id == userId)
  @@allow('create', auth().id == userId)
  @@allow('update', auth().id == userId)
  @@allow('delete', auth().id == userId)
}

model Order {
  id           BigInt        @id @default(autoincrement())
  orderCode    String        @map("order_code")
  nameOrder    String        @map("name_order")
  phoneNumber  String        @map("phone_number")
  address      String
  notes        String?
  orderDate    DateTime      @map("order_date")
  deliveryDate DateTime?     @map("delivery_date")
  orderStatus  String        @map("order_status")
  totalAmount  Decimal       @map("total_amount") @db.Decimal(19, 2)
  userId       BigInt        @map("user_id")
  
  // Relations
  user         User          @relation(fields: [userId], references: [id])
  orderDetails OrderDetail[]

  // Access policies
  @@allow('read', auth().id == userId || auth().roleId == 1)
  @@allow('create', auth().id == userId)
  @@allow('update', auth().roleId == 1 || (auth().id == userId && orderStatus == "Chờ xác nhận"))
  @@allow('delete', auth().roleId == 1)
}

model OrderDetail {
  id        BigInt  @id @default(autoincrement())
  orderId   BigInt  @map("order_id")
  productId BigInt  @map("product_id")
  quantity  BigInt
  unitPrice Decimal @map("unit_price") @db.Decimal(19, 2)
  
  // Relations
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  // Access policies
  @@allow('read', order.userId == auth().id || auth().roleId == 1)
  @@allow('create', auth() != null)
  @@allow('update', auth().roleId == 1)
  @@allow('delete', auth().roleId == 1)
}
