//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  CUSTOMER
  DRIVER
  MANAGER
  ADMIN
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
  DISCONTINUED
  COMING_SOON
}

enum OrderStatus {
  PENDING
  PROCESSING
  AWAITING_PAYMENT
  READY_FOR_PICKUP
  SHIPPED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  REFUNDED
  ON_HOLD
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
  FAILED
  EXPIRED
  CANCELLED
}

enum DeliveryStatus {
  PENDING
  ASSIGNED
  PICKED_UP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  ATTEMPTED_DELIVERY
  DELIVERED
  FAILED
  CANCELLED
}

model User {
  id           Int        @id() @default(autoincrement())
  email        String     @unique()
  username     String     @unique()
  password     String
  name         String
  phone        String?
  addresses    Address[]
  birthday     DateTime?  @db.Date()
  isEnabled    Boolean    @default(true)
  role         Role       @default(CUSTOMER)
  profileImage String?    @map("profile_image")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt() @map("updated_at")
  lastLoginAt  DateTime?  @map("last_login_at")
  carts        Cart[]
  orders       Order[]
  deliveries   Delivery[] @relation("DeliveryDriver")

  @@map("users")
}

model Address {
  id            Int        @id() @default(autoincrement())
  userId        Int        @map("user_id")
  label         String
  streetAddress String     @map("street_address")
  city          String
  state         String?
  postalCode    String     @map("postal_code")
  country       String
  isDefault     Boolean    @default(false) @map("is_default")
  phoneNumber   String?    @map("phone_number")
  deliveryNotes String?    @map("delivery_notes")
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  deliveryFrom  Delivery[] @relation("DeliveryFrom")
  deliveryTo    Delivery[] @relation("DeliveryTo")
  orders        Order[]    @relation("ShippingAddress")

  @@map("addresses")
}

model Category {
  id            Int        @id() @default(autoincrement())
  name          String     @unique()
  description   String?
  slug          String     @unique()
  parentId      Int?       @map("parent_id")
  isActive      Boolean    @default(true) @map("is_active")
  parent        Category?  @relation("SubCategories", fields: [parentId], references: [id])
  subCategories Category[] @relation("SubCategories")
  product       Product[]

  @@map("categories")
}

model Product {
  id          Int              @id() @default(autoincrement())
  name        String
  description String?          @db.Text()
  slug        String           @unique()
  quantity    Int              @default(0)
  brand       String?
  categoryId  Int
  status      ProductStatus    @default(ACTIVE)
  type        String?
  weight      Decimal?         @db.Decimal(8, 2)
  dimensions  String?
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt() @map("updated_at")
  variants    ProductVariant[]
  carts       Cart[]
  orderItems  OrderItem[]
  category    Category         @relation(fields: [categoryId], references: [id])

  @@map("products")
}

model Attribute {
  id          Int              @id() @default(autoincrement())
  name        String           @unique()
  displayName String           @map("display_name")
  values      AttributeValue[]

  @@map("attributes")
}

model AttributeValue {
  id             Int             @id() @default(autoincrement())
  attributeId    Int             @map("attribute_id")
  value          String
  attribute      Attribute       @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  variantOptions VariantOption[]

  @@unique([attributeId, value])
  @@map("attribute_values")
}

model ProductVariant {
  id        Int             @id() @default(autoincrement())
  productId Int             @map("product_id")
  sku       String          @unique()
  price     Decimal         @db.Decimal(10, 2)
  salePrice Decimal?        @map("sale_price") @db.Decimal(10, 2)
  quantity  Int             @default(0)
  image     String?
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  options   VariantOption[]

  @@map("product_variants")
}

model VariantOption {
  id               Int            @id() @default(autoincrement())
  variantId        Int            @map("variant_id")
  attributeValueId Int            @map("attribute_value_id")
  variant          ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  attributeValue   AttributeValue @relation(fields: [attributeValueId], references: [id], onDelete: Cascade)

  @@unique([variantId, attributeValueId])
  @@map("variant_options")
}

model Cart {
  id        Int      @id() @default(autoincrement())
  userId    Int      @map("user_id")
  productId Int      @map("product_id")
  variantId Int?     @map("variant_id")
  quantity  Int
  addedAt   DateTime @default(now()) @map("added_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, variantId])
  @@map("carts")
}

model Order {
  id             Int                  @id() @default(autoincrement())
  orderCode      String               @unique() @map("order_code")
  userId         Int                  @map("user_id")
  addressId      Int                  @map("address_id")
  totalAmount    Decimal              @map("total_amount") @db.Decimal(10, 2)
  subtotal       Decimal              @db.Decimal(10, 2)
  taxAmount      Decimal              @map("tax_amount") @db.Decimal(10, 2)
  shippingAmount Decimal              @map("shipping_amount") @db.Decimal(10, 2)
  discountAmount Decimal              @default(0) @map("discount_amount") @db.Decimal(10, 2)
  couponCode     String?              @map("coupon_code")
  orderDate      DateTime             @default(now()) @map("order_date")
  status         OrderStatus          @default(PENDING)
  paymentStatus  PaymentStatus        @default(PENDING) @map("payment_status")
  paymentMethod  String               @map("payment_method")
  paymentId      String?              @map("payment_id")
  notes          String?              @db.Text()
  user           User                 @relation(fields: [userId], references: [id])
  address        Address              @relation("ShippingAddress", fields: [addressId], references: [id])
  orderItems     OrderItem[]
  statusHistory  OrderStatusHistory[]
  deliveries     Delivery[]

  @@map("orders")
}

model OrderItem {
  id             Int     @id() @default(autoincrement())
  orderId        Int     @map("order_id")
  productId      Int     @map("product_id")
  quantity       Int
  unitPrice      Decimal @map("unit_price") @db.Decimal(10, 2)
  totalPrice     Decimal @map("total_price") @db.Decimal(10, 2)
  discount       Decimal @default(0) @db.Decimal(10, 2)
  productName    String  @map("product_name")
  productSku     String  @map("product_sku")
  variantOptions String? @map("variant_options")
  order          Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product        Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model OrderStatusHistory {
  id          Int         @id() @default(autoincrement())
  orderId     Int         @map("order_id")
  status      OrderStatus
  notes       String?     @db.Text()
  createdById Int         @map("created_by_id")
  createdAt   DateTime    @default(now()) @map("created_at")
  order       Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_status_history")
}

model Delivery {
  id                Int            @id() @default(autoincrement())
  orderId           Int            @map("order_id")
  driverId          Int?           @map("driver_id")
  fromAddressId     Int            @map("from_address_id")
  toAddressId       Int            @map("to_address_id")
  scheduledDate     DateTime?      @map("scheduled_date")
  deliveredDate     DateTime?      @map("delivered_date")
  status            DeliveryStatus @default(PENDING)
  estimatedDelivery DateTime?      @map("estimated_delivery")
  notes             String?        @db.Text()
  order             Order          @relation(fields: [orderId], references: [id])
  driver            User?          @relation("DeliveryDriver", fields: [driverId], references: [id])
  fromAddress       Address        @relation("DeliveryFrom", fields: [fromAddressId], references: [id])
  toAddress         Address        @relation("DeliveryTo", fields: [toAddressId], references: [id])

  @@map("deliveries")
}
